entity Customer {
	idUser Long,
	firstName String required,
	lastName String required,
	email String required,
	phoneNumber String,
	hireDate Instant
}

entity Region {
	regionName String
}

entity Country {
	countryName String
}

entity Product {
	productName String,
    price Long
}

entity Store {
	name String,
    quantity Long
}

// an ignored comment
/** not an ignored comment */
entity Location {
	streetAddress String,
	postalCode String,
	city String,
	stateProvince String
}

entity Department {
	departmentName String required
}

/**
 * Task entity.
 * @author The JHipster team.
 */
entity Task {
	title String,
	description String
}

/**
 * The Employee entity.
 */
entity Employee {
	/**
	* The firstname attribute.
	*/
	salary Long,
	commissionPct Long,
    picture String
}

entity Job {
	jobTitle String,
	minSalary Long,
	maxSalary Long
}

entity JobHistory {
	startDate Instant,
	endDate Instant,
	language Language
}

entity LoveWall {
	name String
}
entity LikedImage {
	idImage Long,
	pathImage String
}

enum Language {
    FRENCH, ITALIAN, ENGLISH, SPANISH, CHINESE, ARABIAN
}
relationship ManyToMany {
	Store{product} to Product,
}
relationship ManyToMany {
	LoveWall{loveWallImage} to LikedImage,
    LoveWall{loveWallProduct} to Product
}
relationship OneToOne {
	Customer{location} to Location
}
relationship OneToOne {
	Customer{jobHistory} to JobHistory,
    Customer{loveWall} to LoveWall
}
relationship OneToOne {
	Country{region} to Region
}

relationship OneToOne {
	Location{country} to Country
}

relationship OneToOne {
	Department{location} to Location
}

relationship ManyToMany {
	Job{task(title)} to Task{job}
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	Employee{job} to Job,
	/**
	* A relationship
	*/
	Department{employee} to
	/**
	* Another side of the same relationship
	*/
	Employee,
    Employee{store} to Store
}

relationship ManyToOne {
	Employee{manager} to Employee
}

// defining multiple oneToOne relationships
relationship OneToOne {
	JobHistory{job} to Job,
	JobHistory{department} to Department,
	JobHistory{employee} to Employee
}

// Set pagination options
paginate JobHistory, Employee with infinite-scroll
paginate Job with pagination

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
